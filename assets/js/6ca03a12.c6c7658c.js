"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[40086],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>m});var a=t(67294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function r(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,i=function(n,e){if(null==n)return{};var t,a,i={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var c=a.createContext({}),l=function(n){var e=a.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):r(r({},e),n)),t},u=function(n){var e=l(n.components);return a.createElement(c.Provider,{value:e},n.children)},p="mdxType",f={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,i=n.mdxType,o=n.originalType,c=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),p=l(t),d=i,m=p["".concat(c,".").concat(d)]||p[d]||f[d]||o;return t?a.createElement(m,r(r({ref:e},u),{},{components:t})):a.createElement(m,r({ref:e},u))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var o=t.length,r=new Array(o);r[0]=d;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s[p]="string"==typeof n?n:i,r[1]=s;for(var l=2;l<o;l++)r[l]=t[l];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},85760:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=t(87462),i=(t(67294),t(3905));const o={slug:"/function-definitions",id:"function-definitions",sidebar_label:"Function Definitions",title:"Definitions of Function",description:"Learn about Javascript Function using our interactive Code Editor. in this tutorial, you will learn about the different ways to define functions in JavaScript. and their use cases.",keywords:["JavaScript function","Function declaration","Function expression","Arrow function","Named function","Anonymous function","Higher-order function","Callback function","IIFE (Immediately Invoked Function Expression)","Function parameters","Default parameters","Rest parameters","Function scope","Lexical scope","Function hoisting"],image:"https://cscnotes.netlify.app/img/jsfunctions-large.png"},r=void 0,s={unversionedId:"Javascript Functions/Function Definitions/function-definitions",id:"Javascript Functions/Function Definitions/function-definitions",title:"Definitions of Function",description:"Learn about Javascript Function using our interactive Code Editor. in this tutorial, you will learn about the different ways to define functions in JavaScript. and their use cases.",source:"@site/docs/tutorial-javascript/06-Javascript Functions/02-Function Definitions/index.mdx",sourceDirName:"06-Javascript Functions/02-Function Definitions",slug:"/function-definitions",permalink:"/javascript/function-definitions",draft:!1,tags:[],version:"current",frontMatter:{slug:"/function-definitions",id:"function-definitions",sidebar_label:"Function Definitions",title:"Definitions of Function",description:"Learn about Javascript Function using our interactive Code Editor. in this tutorial, you will learn about the different ways to define functions in JavaScript. and their use cases.",keywords:["JavaScript function","Function declaration","Function expression","Arrow function","Named function","Anonymous function","Higher-order function","Callback function","IIFE (Immediately Invoked Function Expression)","Function parameters","Default parameters","Rest parameters","Function scope","Lexical scope","Function hoisting"],image:"https://cscnotes.netlify.app/img/jsfunctions-large.png"},sidebar:"ethernetip",previous:{title:"Object Maps",permalink:"/javascript/object-maps"},next:{title:"Function Parameters",permalink:"/javascript/function-parameters"}},c={},l=[{value:"Function Declaration",id:"function-declaration",level:2},{value:"Function Expression",id:"function-expression",level:2},{value:"Arrow Function (ES6+)",id:"arrow-function-es6",level:2},{value:"Function Constructor",id:"function-constructor",level:2},{value:"Function Hoisting",id:"function-hoisting",level:2},{value:"Self-Invoking Functions",id:"self-invoking-functions",level:2},{value:"Common use of self-invoking functions",id:"common-use-of-self-invoking-functions",level:2},{value:"Creating a private scope",id:"creating-a-private-scope",level:3},{value:"Encapsulating code",id:"encapsulating-code",level:3},{value:"Achieving module-like behavior",id:"achieving-module-like-behavior",level:3},{value:"Functions Can Be Used as Values",id:"functions-can-be-used-as-values",level:2},{value:"Assigning functions to variables",id:"assigning-functions-to-variables",level:3},{value:"Passing functions as arguments to other functions",id:"passing-functions-as-arguments-to-other-functions",level:3},{value:"Returning functions from other functions",id:"returning-functions-from-other-functions",level:3},{value:"Using functions as objects",id:"using-functions-as-objects",level:3},{value:"Creating higher-order functions",id:"creating-higher-order-functions",level:3}],u={toc:l};function p(n){let{components:e,...t}=n;return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("head",null,(0,i.kt)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,i.kt)("meta",{name:"twitter:site",content:"@CSC"}),(0,i.kt)("meta",{name:"twitter:title",content:"Introduction to Javascript Function"}),(0,i.kt)("meta",{name:"twitter:description",content:"Learn about Javascript Function using our interactive Code Editor."}),(0,i.kt)("meta",{name:"twitter:image",content:"https://cscnotes.netlify.app/img/jsfunctions-large.png"}),(0,i.kt)("meta",{name:"twitter:image:alt",content:"Javascript Tutorial Banner Image"}),(0,i.kt)("meta",{name:"og:type",content:"article"}),(0,i.kt)("meta",{name:"og:title",content:"Introduction to Javascript Function"}),(0,i.kt)("meta",{name:"og:description",content:"Learn about Javascript Function using our interactive Code Editor."}),(0,i.kt)("meta",{name:"og:image",content:"https://cscnotes.netlify.app/img/jsfunctions-large.png"}),(0,i.kt)("meta",{name:"og:image:alt",content:"Javascript Tutorial Banner Image"}),(0,i.kt)("meta",{name:"og:site_name",content:"CSC"}),(0,i.kt)("meta",{name:"og:url",content:"https://cscnotes.netlify.app/javascript/function-definitions"}),(0,i.kt)("link",{rel:"canonical",href:"https://cscnotes.netlify.app/javascript/function-definitions"})),(0,i.kt)("p",null,"JavaScript functions are ",(0,i.kt)("strong",{parentName:"p"},"used to define reusable pieces of code")," that can be executed when called. "),(0,i.kt)("p",null,"Functions are an ",(0,i.kt)("strong",{parentName:"p"},"essential part of JavaScript programming")," and allow for modular and organized code."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Basic syntax of define functions in JavaScript:")),(0,i.kt)("h2",{id:"function-declaration"},"Function Declaration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function functionName(parameters) {\n  // function body\n  // code to be executed\n  // ...\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This is the most common way to define a function in JavaScript."),(0,i.kt)("li",{parentName:"ul"},"The function declaration starts with the ",(0,i.kt)("inlineCode",{parentName:"li"},"function")," keyword, followed by the function name, a list of parameters enclosed in parentheses, and the function body enclosed in curly braces ",(0,i.kt)("inlineCode",{parentName:"li"},"{}"),".")),(0,i.kt)("h2",{id:"function-expression"},"Function Expression"),(0,i.kt)("p",null,"An expression can also be used to define a JavaScript function."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\nA function expression can be stored in a variable:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"var functionName = function (parameters) {\n  // function body\n  // code to be executed\n  // ...\n};\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In this example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Function is defined as an anonymous function and assigned to a variable."),(0,i.kt)("li",{parentName:"ul"},"The variable then becomes a reference to the function and can be invoked like a regular function.")),(0,i.kt)("h2",{id:"arrow-function-es6"},"Arrow Function (ES6+)"),(0,i.kt)("p",null,"Now let's look at the syntax for defining an arrow function in JavaScript."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"const functionName = (parameters) => {\n  // function body\n  // code to be executed\n  // ...\n};\n")),(0,i.kt)("p",null,"Arrow functions are a ",(0,i.kt)("strong",{parentName:"p"},"concise way to define functions")," in JavaScript ",(0,i.kt)("strong",{parentName:"p"},"introduced in ECMAScript 6 (ES6)"),". "),(0,i.kt)("p",null,"They use a shorter syntax and have lexical scoping of ",(0,i.kt)("inlineCode",{parentName:"p"},"this"),", making them useful for certain scenarios."),(0,i.kt)("h2",{id:"function-constructor"},"Function Constructor"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"The Basic syntax of Arrow Function:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var functionName = new Function("parameters", "... function body ...");\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Function")," constructor is a less common way to define functions in JavaScript. It ",(0,i.kt)("strong",{parentName:"p"},"takes a series of strings as arguments")," that represent the parameters and function body and returns a new function object."),(0,i.kt)("h2",{id:"function-hoisting"},"Function Hoisting"),(0,i.kt)("p",null,"Function hoisting is a behavior in JavaScript ",(0,i.kt)("strong",{parentName:"p"},"where function declarations are automatically moved to the top of the code during the compilation")," phase, before the code is executed. This ",(0,i.kt)("strong",{parentName:"p"},"allows you to call a function before it is actually defined")," in the code."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As an example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'foo(); // Function call before declaration\n\nfunction foo() {\n  console.log("Function has been hoisted!");\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In this example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"foo()")," function is called before its declaration, JavaScript hoists the function declaration to the top of the code, making it accessible for execution."),(0,i.kt)("li",{parentName:"ul"},'This code will run without any errors and print "Function has been hoisted!" to the console.')),(0,i.kt)("h2",{id:"self-invoking-functions"},"Self-Invoking Functions"),(0,i.kt)("p",null,"Self-invoking functions, ",(0,i.kt)("strong",{parentName:"p"},"also known as Immediately Invoked Function Expressions (IIFE)"),", are functions in JavaScript that are defined and ",(0,i.kt)("strong",{parentName:"p"},"executed immediately after their creation"),". They are often used to create a private scope for variables and functions, preventing them from polluting the global scope."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Here's an example of a self-invoking function:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"(function () {\n  // Function body\n  // Code to be executed\n})();\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the above example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A function is defined within parentheses ",(0,i.kt)("inlineCode",{parentName:"li"},"()")," and immediately invoked with an additional set of parentheses at the end ",(0,i.kt)("inlineCode",{parentName:"li"},"()"),"."),(0,i.kt)("li",{parentName:"ul"},"This causes the function to be executed immediately after it is defined.")),(0,i.kt)("h2",{id:"common-use-of-self-invoking-functions"},"Common use of self-invoking functions"),(0,i.kt)("p",null,"Self-invoking functions are commonly used in JavaScript for various purposes."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"}," such as:")),(0,i.kt)("h3",{id:"creating-a-private-scope"},"Creating a private scope"),(0,i.kt)("p",null,"Variables and functions defined within a self-invoking function are scoped to that function and are not accessible from outside the function, effectively creating a private scope. This can help prevent variable name clashes and keep the global scope clean."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As an example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'(function () {\n  var privateVar = "This is private";\n  // privateVar is only accessible within the function\n})();\n\nconsole.log(privateVar); // Error: privateVar is not defined\n')),(0,i.kt)("h3",{id:"encapsulating-code"},"Encapsulating code"),(0,i.kt)("p",null,"Self-invoking functions can be used to encapsulate code, allowing you to group related logic and isolate it from the rest of the codebase. This can improve code organization and readability."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As an example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"(function () {\n  // Code related to a specific task or feature\n  // ...\n})();\n")),(0,i.kt)("h3",{id:"achieving-module-like-behavior"},"Achieving module-like behavior"),(0,i.kt)("p",null,"Self-invoking functions can be used to create modular code by encapsulating functionality within a self-contained function that exposes only the necessary public interfaces."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As an example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'var module = (function () {\n  var privateVar = "This is private";\n\n  function privateFunction() {\n    // Code for private function\n  }\n\n  return {\n    publicVar: "This is public",\n    publicFunction: function () {\n      // Code for public function\n    },\n  };\n})();\n\nconsole.log(module.publicVar); // "This is public"\nmodule.publicFunction(); // Call to public function\n')),(0,i.kt)("h2",{id:"functions-can-be-used-as-values"},"Functions Can Be Used as Values"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Functions are first-class citizens")," in javascript, which means they can be ",(0,i.kt)("strong",{parentName:"p"},"treated as values and used in various ways")," just like other types of values such as numbers, strings, or objects. This is one of the powerful features of JavaScript that allows for functional programming paradigms."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Here are some examples of how functions can be used as values in JavaScript:")),(0,i.kt)("h3",{id:"assigning-functions-to-variables"},"Assigning functions to variables"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As an example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'const greet = function () {\n  console.log("Hello!");\n};\n\ngreet(); // "Hello!"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the above example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A function expression is assigned to a variable ",(0,i.kt)("inlineCode",{parentName:"li"},"greet"),", and the function can be called using the variable as a regular function.")),(0,i.kt)("h3",{id:"passing-functions-as-arguments-to-other-functions"},"Passing functions as arguments to other functions"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As an example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'function execute(callback) {\n  callback();\n}\n\nfunction greet() {\n  console.log("Hello!");\n}\n\nexecute(greet); // "Hello!"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the above example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"greet")," function is passed as an argument to the ",(0,i.kt)("inlineCode",{parentName:"li"},"execute")," function, which then calls the callback function.")),(0,i.kt)("h3",{id:"returning-functions-from-other-functions"},"Returning functions from other functions"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As an example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'function getGreeting() {\n  return function () {\n    console.log("Hello!");\n  };\n}\n\nconst greet = getGreeting();\ngreet(); // "Hello!"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the above example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"getGreeting")," function returns another function, which can be assigned to a variable and called like any other function.")),(0,i.kt)("h3",{id:"using-functions-as-objects"},"Using functions as objects"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As an example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},'function greet() {\n  console.log("Hello!");\n}\n\ngreet.message = "Welcome!";\n\nconsole.log(greet.message); // "Welcome!"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the above example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Functions can have properties just like objects, and you can attach custom properties or methods to a function.")),(0,i.kt)("h3",{id:"creating-higher-order-functions"},"Creating higher-order functions"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As an example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"function multiplyBy(factor) {\n  return function (num) {\n    return num * factor;\n  };\n}\n\nconst double = multiplyBy(2);\nconsole.log(double(5)); // 10\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"In the above example:")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The multiplyBy function returns another function, creating a higher-order function that can generate new functions with specific behavior.")))}p.isMDXComponent=!0}}]);