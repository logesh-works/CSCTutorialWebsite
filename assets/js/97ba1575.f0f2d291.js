"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[83315],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),c=p(n),k=a,d=c["".concat(s,".").concat(k)]||c[k]||u[k]||o;return n?r.createElement(d,l(l({ref:t},m),{},{components:n})):r.createElement(d,l({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},72139:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>m});var r=n(87462),a=(n(67294),n(3905)),o=n(39005);const l={slug:"/html-webworkers",id:"html-webworkers",sidebar_label:"HTML Web Workers",title:"HTML Web Workers API",description:"Unlock the power of HTML Web Workers to run scripts in the background, enabling multithreading and parallel processing for improved web application performance. Learn to create dedicated and shared workers, communicate with Web Workers, and make your web apps more efficient.",keywords:["HTML Web Workers","Web Workers in HTML","Worker API","Multithreading","Parallel Processing","Background Tasks","Dedicated Workers","Shared Workers","Communicating with Web Workers","Worker Events","HTML Playground","Code Editor","Online IDE","Interactive IDE","HTML Semantics","HTML Validation","Web Development","Multithreaded JavaScript","Web Worker Communication","Worker Termination","Background Processing","HTML Tutorial","Web Application Efficiency","HTML Multithreading"],image:"https://cscnotes.netlify.app/img/html-large.png"},i=void 0,s={unversionedId:"HTML  APIs/HTML Web Workers/html-webworkers",id:"HTML  APIs/HTML Web Workers/html-webworkers",title:"HTML Web Workers API",description:"Unlock the power of HTML Web Workers to run scripts in the background, enabling multithreading and parallel processing for improved web application performance. Learn to create dedicated and shared workers, communicate with Web Workers, and make your web apps more efficient.",source:"@site/docs/tutorial-html/10-HTML  APIs/100-HTML Web Workers/index.mdx",sourceDirName:"10-HTML  APIs/100-HTML Web Workers",slug:"/html-webworkers",permalink:"/html/html-webworkers",draft:!1,tags:[],version:"current",frontMatter:{slug:"/html-webworkers",id:"html-webworkers",sidebar_label:"HTML Web Workers",title:"HTML Web Workers API",description:"Unlock the power of HTML Web Workers to run scripts in the background, enabling multithreading and parallel processing for improved web application performance. Learn to create dedicated and shared workers, communicate with Web Workers, and make your web apps more efficient.",keywords:["HTML Web Workers","Web Workers in HTML","Worker API","Multithreading","Parallel Processing","Background Tasks","Dedicated Workers","Shared Workers","Communicating with Web Workers","Worker Events","HTML Playground","Code Editor","Online IDE","Interactive IDE","HTML Semantics","HTML Validation","Web Development","Multithreaded JavaScript","Web Worker Communication","Worker Termination","Background Processing","HTML Tutorial","Web Application Efficiency","HTML Multithreading"],image:"https://cscnotes.netlify.app/img/html-large.png"},sidebar:"ethernetip",previous:{title:"HTML Web Storage",permalink:"/html/html-webstorage"},next:{title:"HTML SSE",permalink:"/html/html-sse"}},p={},m=[{value:"Check Web Worker Support",id:"check-web-worker-support",level:2},{value:"Create a Web Worker File",id:"create-a-web-worker-file",level:2},{value:"Create a Web Worker Object",id:"create-a-web-worker-object",level:2},{value:"Full Web Worker Example",id:"full-web-worker-example",level:2}],c={toc:m};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("head",null,(0,a.kt)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,a.kt)("meta",{name:"twitter:site",content:"@CSC"}),(0,a.kt)("meta",{name:"twitter:title",content:"HTML Web Workers API"}),(0,a.kt)("meta",{name:"twitter:description",content:"Learn about HTML Web Workers using our interactive Code Editor."}),(0,a.kt)("meta",{name:"twitter:image",content:"https://cscnotes.netlify.app/img/html-large.png"}),(0,a.kt)("meta",{name:"twitter:image:alt",content:"HTML Tutorial Banner Image"}),(0,a.kt)("meta",{name:"og:type",content:"article"}),(0,a.kt)("meta",{name:"og:title",content:"HTML Web Workers API"}),(0,a.kt)("meta",{name:"og:description",content:"Learn about HTML Web Workers using our interactive Code Editor."}),(0,a.kt)("meta",{name:"og:image",content:"https://cscnotes.netlify.app/img/html-large.png"}),(0,a.kt)("meta",{name:"og:image:alt",content:"HTML Tutorial Banner Image"}),(0,a.kt)("link",{rel:"canonical",href:"https://cscnotes.netlify.app/html/html-webworkers"}),(0,a.kt)("meta",{name:"og:site_name",content:"CSC"})),(0,a.kt)("p",null,"The HTML Web Workers API allows you to ",(0,a.kt)("strong",{parentName:"p"},"run scripts in the background without blocking the main thread of your web application"),". "),(0,a.kt)("p",null,"This can be useful for computationally intensive tasks or long-running operations that would otherwise slow down the user interface."),(0,a.kt)("p",null,"A web worker is a ",(0,a.kt)("strong",{parentName:"p"},"separate JavaScript file that is executed in a separate thread")," from the main thread of your web application."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"As an example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// create a new web worker\nconst worker = new Worker("worker.js");\n\n// send a message to the worker\nworker.postMessage({number: 100});\n\n// receive a message from the worker\nworker.onmessage = function (event) {\n  console.log(event.data);\n};\n\n// content of worker.js\nonmessage = function (event) {\n  const number = event.data.number;\n  let result = 1;\n  for (let i = 1; i <= number; i++) {\n    result *= i;\n  }\n  // send the result back to the main thread\n  postMessage(result);\n};\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We create a new web worker by passing the path to the ",(0,a.kt)("inlineCode",{parentName:"li"},"worker")," JavaScript file to the ",(0,a.kt)("inlineCode",{parentName:"li"},"Worker")," constructor."),(0,a.kt)("li",{parentName:"ul"},"We then send a message to the ",(0,a.kt)("inlineCode",{parentName:"li"},"worker")," using the ",(0,a.kt)("inlineCode",{parentName:"li"},"postMessage")," method, passing an object with the number property set to the number we want to calculate the factorial of."),(0,a.kt)("li",{parentName:"ul"},"The worker receives this message in its ",(0,a.kt)("inlineCode",{parentName:"li"},"onmessage")," handler and calculates the factorial, sending the result back to the main thread using the ",(0,a.kt)("inlineCode",{parentName:"li"},"postMessage")," method."),(0,a.kt)("li",{parentName:"ul"},"The main thread receives the result in its ",(0,a.kt)("inlineCode",{parentName:"li"},"onmessage")," handler and logs it to the console."),(0,a.kt)("li",{parentName:"ul"},"The HTML Web Workers API provides a way to perform computationally intensive tasks in the background without blocking the user interface of your web application.")),(0,a.kt)("h2",{id:"check-web-worker-support"},"Check Web Worker Support"),(0,a.kt)("p",null,"You can check if web workers are supported in the user's browser ",(0,a.kt)("strong",{parentName:"p"}," using the ",(0,a.kt)("inlineCode",{parentName:"strong"},"typeof")," operator")," to check if the ",(0,a.kt)("inlineCode",{parentName:"p"},"Worker")," constructor is defined. "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"As an example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'if (typeof Worker !== "undefined") {\n  // web workers are supported\n} else {\n  // web workers are not supported\n}\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We use the ",(0,a.kt)("inlineCode",{parentName:"li"},"typeof")," operator to check if the ",(0,a.kt)("inlineCode",{parentName:"li"},"Worker")," constructor is defined."),(0,a.kt)("li",{parentName:"ul"},"If it is defined, we know that web workers are supported in the user's browser."),(0,a.kt)("li",{parentName:"ul"},"If it is not defined, we know that web workers are not supported and we should provide an alternative way to perform the task.")),(0,a.kt)("h2",{id:"create-a-web-worker-file"},"Create a Web Worker File"),(0,a.kt)("p",null,"To create a web worker file, you ",(0,a.kt)("strong",{parentName:"p"},"simply create a new JavaScript file")," with your worker code and save it with a ",(0,a.kt)("inlineCode",{parentName:"p"},".js")," extension. "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"As an example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// worker.js\nonmessage = function (event) {\n  const message = event.data;\n  console.log("Worker received message:", message);\n  const result = message.toUpperCase();\n  postMessage(result);\n};\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We define a function that will be called whenever the worker receives a message from the main thread."),(0,a.kt)("li",{parentName:"ul"},"We log the message to the console and then transform it to uppercase before sending it back to the main thread using the ",(0,a.kt)("inlineCode",{parentName:"li"},"postMessage")," method.")),(0,a.kt)("p",null,"Once you have created your worker file, you can ",(0,a.kt)("strong",{parentName:"p"},"create a new instance of the worker")," in your main JavaScript file ",(0,a.kt)("strong",{parentName:"p"},"using the Worker constructor")," and passing the path to your ",(0,a.kt)("inlineCode",{parentName:"p"},"worker")," file as an argument."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"As an example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'// main.js\nconst worker = new Worker("worker.js");\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We create a new instance of the ",(0,a.kt)("inlineCode",{parentName:"li"},"Worker")," object and pass the path to our worker file as an argument."),(0,a.kt)("li",{parentName:"ul"},"The worker will then run in a separate thread and can communicate with the main thread using the ",(0,a.kt)("inlineCode",{parentName:"li"},"postMessage")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"onmessage")," methods.")),(0,a.kt)("h2",{id:"create-a-web-worker-object"},"Create a Web Worker Object"),(0,a.kt)("p",null,"To create a web worker object in your main JavaScript file, you can ",(0,a.kt)("strong",{parentName:"p"},"use the ",(0,a.kt)("inlineCode",{parentName:"strong"},"new Worker()")," constructor"),", passing the path to the worker file as an argument."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"As an example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'const worker = new Worker("worker.js");\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We create a new ",(0,a.kt)("inlineCode",{parentName:"li"},"Worker")," object and pass the path to the worker file, ",(0,a.kt)("inlineCode",{parentName:"li"},"worker.js"),", as an argument.")),(0,a.kt)("p",null,"Once you have created the worker object, you can ",(0,a.kt)("strong",{parentName:"p"},"send messages to the worker using the ",(0,a.kt)("inlineCode",{parentName:"strong"},"worker.postMessage()"))," method."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"As an example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'worker.postMessage("Hello, worker!");\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We send a message to the worker with the text ",(0,a.kt)("inlineCode",{parentName:"li"},'"Hello, worker!"'),".")),(0,a.kt)("p",null,"You can also ",(0,a.kt)("strong",{parentName:"p"},"receive messages from the worker using the ",(0,a.kt)("inlineCode",{parentName:"strong"},"worker.onmessage()"))," method."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"As an  example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'worker.onmessage = function (event) {\n  console.log("Message received from worker:", event.data);\n};\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We define a function to be called whenever a message is received from the worker."),(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"event")," parameter contains the message data, which we log to the console.")),(0,a.kt)("p",null,"Finally, ",(0,a.kt)("strong",{parentName:"p"},"to terminate the worker"),", you can",(0,a.kt)("strong",{parentName:"p"}," call the ",(0,a.kt)("inlineCode",{parentName:"strong"},"worker.terminate()"))," method."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"As an example:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"worker.terminate();\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"In this example:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We terminate the worker immediately after sending a message to it.  "),(0,a.kt)("li",{parentName:"ul"},"It's important to note that terminating a worker will immediately stop its execution and any unfinished work will be lost."),(0,a.kt)("li",{parentName:"ul"},"You should only terminate a worker when you no longer need it.")),(0,a.kt)("h2",{id:"full-web-worker-example"},"Full Web Worker Example"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example of using web workers to calculate the factorial of a number in an inline HTML document:")),(0,a.kt)(o.Z,{htmlCode:'<!DOCTYPE html>\n<html>\n<head>\n  <meta charset="UTF-8">\n  <title>Web Worker Example</title>\n  <script>\n    const workerCode = `\n      onmessage = function(event) {\n        const num = event.data;\n        console.log(\'Worker received message:\', num);\n        const result = factorial(num);\n        postMessage(result);\n      };\n\n      function factorial(num) {\n        if (num === 0 || num === 1) {\n          return 1;\n        } else {\n          return num * factorial(num - 1);\n        }\n      }\n    `;\n\n    function calculateFactorial() {\n      const num = parseInt(document.getElementById(\'num\').value);\n      const workerBlob = new Blob([workerCode], {type: \'application/javascript\'});\n      const workerUrl = URL.createObjectURL(workerBlob);\n      const worker = new Worker(workerUrl);\n\n      worker.onmessage = function(event) {\n        document.getElementById(\'result\').textContent = event.data;\n        worker.terminate();\n        URL.revokeObjectURL(workerUrl);\n      };\n\n      console.log(\'Calculating factorial of\', num);\n      worker.postMessage(num);\n    }\n  <\/script>\n</head>\n<body>\n  <label for="num">Enter a number:</label>\n  <input type="number" id="num">\n  <button onclick="calculateFactorial()">Calculate Factorial</button>\n  <p>Result: <span id="result"></span></p>\n</body>\n</html>\n',elementId:"sku-example1",mdxType:"CustomEditorHTML"}))}u.isMDXComponent=!0},39005:(e,t,n)=>{n.d(t,{Z:()=>u});var r=n(67294),a=n(19604);const o="label_OGF5",l="container_vJjB",i="editorWindow_Gfn9",s="outputwindow_HHdh",p="button_jrAF";var m=n(9200),c=n(36136);const u=e=>{let{htmlCode:t,elementId:n}=e;const[u,k]=(0,r.useState)(t),{colorMode:d}=(0,m.I)();let h=null;function g(){console.log("elementId=",n),document.getElementById(n).innerHTML="",document.getElementById(n).appendChild(h),h.contentDocument.open(),h.contentDocument.write(u),h.contentDocument.close(),h.style.height=h.contentWindow.document.body.scrollHeight+50+"px"}return c.Z.canUseDOM&&(h=document.createElement("iframe"),h.style.width="100%",h.style.height="100%",h.style.background="#fff"),(0,r.useEffect)((()=>{c.Z.canUseDOM&&g()}),[""]),r.createElement("div",{className:l},r.createElement("h3",{className:o},"Editor"),r.createElement(a.ZP,{className:i,height:"40vh",defaultLanguage:"html",defaultValue:u,onChange:k,theme:"dark"===d?"vs-dark":"light",options:{readOnly:!1,minimap:{enabled:!1}}}),r.createElement("div",{className:p},r.createElement("button",{onClick:g,className:"button button--success"},"Run Example >>")),r.createElement("div",{className:s,id:n}))}}}]);