"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[35704],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(a),m=o,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||r;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},7375:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>p});var n=a(87462),o=(a(67294),a(3905)),r=a(31673);const i={slug:"javascript-decorators-enhancing-functions-and-classes",title:"JavaScript Decorators: Enhancing Functions and Classes | Ultimate Guide",description:"Unlock the power of JavaScript decorators in this comprehensive guide. Learn how to use decorators to elevate your JavaScript code with modularity, reusability, and enhanced readability. Dive into practical examples and master the art of function and class enhancement.",keywords:["JavaScript decorators","Decorators in JavaScript JavaScript decorators tutorial","Decorators examples in JavaScript","Function decorators in JavaScript","Class decorators in JavaScript","Decorator factories in JavaScript","JavaScript code enhancement","Modifying functions and classes in JavaScript","JavaScript metaprogramming techniques"],authors:["CSC"],image:"./javascript-decorators-enhancing-functions-and-classes.png",tags:["Javascript Tutorials","Web Development","Javascript Fundamentls"]},s=void 0,c={permalink:"/blog/javascript-decorators-enhancing-functions-and-classes",source:"@site/blog/2023-08-25-javascript-decorators-enhancing-functions-and-classes/index.mdx",title:"JavaScript Decorators: Enhancing Functions and Classes | Ultimate Guide",description:"Unlock the power of JavaScript decorators in this comprehensive guide. Learn how to use decorators to elevate your JavaScript code with modularity, reusability, and enhanced readability. Dive into practical examples and master the art of function and class enhancement.",date:"2023-08-25T00:00:00.000Z",formattedDate:"August 25, 2023",tags:[{label:"Javascript Tutorials",permalink:"/blog/tags/javascript-tutorials"},{label:"Web Development",permalink:"/blog/tags/web-development"},{label:"Javascript Fundamentls",permalink:"/blog/tags/javascript-fundamentls"}],readingTime:6.715,hasTruncateMarker:!1,authors:[{name:"CSC EDUCATION",title:"Author",url:"https://cscnotes.netlify.app",imageURL:"https://github.com/CSC.png",key:"CSC"}],frontMatter:{slug:"javascript-decorators-enhancing-functions-and-classes",title:"JavaScript Decorators: Enhancing Functions and Classes | Ultimate Guide",description:"Unlock the power of JavaScript decorators in this comprehensive guide. Learn how to use decorators to elevate your JavaScript code with modularity, reusability, and enhanced readability. Dive into practical examples and master the art of function and class enhancement.",keywords:["JavaScript decorators","Decorators in JavaScript JavaScript decorators tutorial","Decorators examples in JavaScript","Function decorators in JavaScript","Class decorators in JavaScript","Decorator factories in JavaScript","JavaScript code enhancement","Modifying functions and classes in JavaScript","JavaScript metaprogramming techniques"],authors:["CSC"],image:"./javascript-decorators-enhancing-functions-and-classes.png",tags:["Javascript Tutorials","Web Development","Javascript Fundamentls"]},prevItem:{title:"Become a Geolocation Pro with JavaScript for Awesome Web Apps",permalink:"/blog/adding-geolocation-to-web-apps-with-javascript"},nextItem:{title:"Mastering JavaScript Functional Programming: Principles and Practical Usage",permalink:"/blog/javascript-functional-programming-concepts-and-practical-use"}},l={image:a(81125).Z,authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials-",level:4},{value:"What are Decorators?",id:"what-are-decorators",level:2},{value:"Benefits of Decorators",id:"benefits-of-decorators",level:2},{value:"1. Function Decorators",id:"1-function-decorators",level:3},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--1",level:4},{value:"2. Class Decorators",id:"2-class-decorators",level:3},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--2",level:4},{value:"3. Decorator Factories",id:"3-decorator-factories",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--3",level:4}],d={toc:p};function u(e){let{components:t,...i}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("head",null,(0,o.kt)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,o.kt)("meta",{name:"twitter:site",content:"@CSC"}),(0,o.kt)("meta",{name:"twitter:title",content:"JavaScript Decorators: Enhancing Functions and Classes | Ultimate Guide"}),(0,o.kt)("meta",{name:"twitter:description",content:"Learn how to use JavaScript decorators to enhance functions and classes."}),(0,o.kt)("meta",{name:"twitter:image",content:"./javascript-decorators-enhancing-functions-and-classes.png"}),(0,o.kt)("meta",{name:"twitter:image:alt",content:"JavaScript Decorators: Enhancing Functions and Classes Banner Image"}),(0,o.kt)("meta",{name:"og:type",content:"article"}),(0,o.kt)("meta",{name:"og:title",content:"JavaScript Decorators: Enhancing Functions and Classes | Ultimate Guide"}),(0,o.kt)("meta",{name:"og:description",content:"Learn how to use JavaScript decorators to enhance functions and classes."}),(0,o.kt)("meta",{name:"og:image",content:"./javascript-decorators-enhancing-functions-and-classes.png"}),(0,o.kt)("meta",{name:"og:image:alt",content:"JavaScript Decorators: Enhancing Functions and Classes Banner Image"}),(0,o.kt)("meta",{name:"og:site_name",content:"CSC"}),(0,o.kt)("meta",{name:"og:url",content:"https://cscnotes.netlify.app/blog/javascript-decorators-enhancing-functions-and-classes"}),(0,o.kt)("link",{rel:"canonical",href:"https://cscnotes.netlify.app/blog/javascript-decorators-enhancing-functions-and-classes"})),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"&quot;JavaScript Decorators: Enhancing Functions and Classes | Ultimate Guide&quot;",src:a(81125).Z,width:"1271",height:"708"})),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"JavaScript decorators are a powerful feature that enable you to modify, extend, or enhance functions and classes in a clean and reusable manner. Borrowed from the world of Python, decorators provide a flexible way to apply behaviors such as logging, authentication, or validation to your code. "),(0,o.kt)("p",null,"In this article, we'll explore the concept of decorators, their benefits, and practical examples to demonstrate how they can elevate your JavaScript codebase."),(0,o.kt)("h4",{id:"suggested-tutorials-"},"Suggested Tutorials \ud83d\udcd1:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,o.kt)(r.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,o.kt)(r.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,o.kt)("h2",{id:"what-are-decorators"},"What are Decorators?"),(0,o.kt)("p",null,"Decorators are a special kind of function that can be used to modify, enhance, or extend the behavior of other functions or classes. They are a form of metaprogramming, which is a technique that allows you to modify the behavior of a program at runtime."),(0,o.kt)("h2",{id:"benefits-of-decorators"},"Benefits of Decorators"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Modularity:")," Decorators encapsulate behaviors, making it easy to apply them selectively to different functions or classes."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Reusability:")," Decorators can be reused across different parts of your codebase, promoting a consistent approach."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Readability:")," Decorators enhance code readability by separating core logic from additional concerns."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Extensibility:")," Decorators can be used to extend the functionality of existing functions or classes without modifying them directly."),(0,o.kt)("h3",{id:"1-function-decorators"},"1. Function Decorators"),(0,o.kt)("p",null,"Function decorators are used to modify the behavior of a function. They are declared using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," symbol followed by the name of the decorator function. The decorator function is then applied to the target function, which is passed as an argument to the decorator function."),(0,o.kt)("p",null,"Let's look at a simple example of a function decorator that logs the name of the function and its arguments to the console."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"\nfunction log(target, name, descriptor) {\n  const original = descriptor.value;\n  if (typeof original === 'function') {\n    descriptor.value = function (...args) {\n      console.log(`Arguments for ${name}: ${args}`);\n      try {\n        const result = original.apply(this, args);\n        console.log(`Result from ${name}: ${result}`);\n        return result;\n      } catch (e) {\n        console.log(`Error from ${name}: ${e}`);\n        throw e;\n      }\n    }\n  }\n  return descriptor;\n}\n\nclass Example {\n  @log\n  sum(a, b) {\n    return a + b;\n  }\n}\n\nconst e = new Example();\ne.sum(1, 2);\n\n// Arguments for sum: 1,2\n// Result from sum: 3\n\n")),(0,o.kt)("p",null,"In the above example, we define a decorator function called ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," that takes three arguments: ",(0,o.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"descriptor"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," argument refers to the class that contains the method being decorated. The ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," argument refers to the name of the method being decorated. The ",(0,o.kt)("inlineCode",{parentName:"p"},"descriptor")," argument is an object that contains the method's properties."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," decorator function then checks if the ",(0,o.kt)("inlineCode",{parentName:"p"},"descriptor")," value is a function. If it is, the decorator function replaces the original function with a new function that logs the name of the function and its arguments to the console. The decorator function then calls the original function and logs the result to the console."),(0,o.kt)("p",null,"Finally, we apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," decorator to the ",(0,o.kt)("inlineCode",{parentName:"p"},"sum")," method of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Example")," class. When we call the ",(0,o.kt)("inlineCode",{parentName:"p"},"sum")," method, the decorator function is invoked and logs the name of the method and its arguments to the console. The decorator function then calls the original ",(0,o.kt)("inlineCode",{parentName:"p"},"sum")," method and logs the result to the console."),(0,o.kt)("h4",{id:"suggested-tutorials--1"},"Suggested Tutorials \ud83d\udcd1:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,o.kt)(r.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,o.kt)(r.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,o.kt)("h3",{id:"2-class-decorators"},"2. Class Decorators"),(0,o.kt)("p",null,"Class decorators are used to modify the behavior of a class. They are declared using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," symbol followed by the name of the decorator function. The decorator function is then applied to the target class, which is passed as an argument to the decorator function."),(0,o.kt)("p",null,"Let's look at a simple example of a class decorator that logs the name of the class and its constructor arguments to the console."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"\nfunction log(target) {\n  const original = target;\n\n  function construct(constructor, args) {\n    const c: any = function () {\n      return constructor.apply(this, args);\n    }\n    c.prototype = constructor.prototype;\n    return new c();\n  }\n\n  const f: any = function (...args) {\n    console.log(`Arguments for ${original.name}: ${args}`);\n    return construct(original, args);\n  }\n\n  f.prototype = original.prototype;\n  return f;\n}\n\n@log\nclass Example {\n  constructor(a, b) {\n    console.log('constructor');\n  }\n}\n\nconst e = new Example(1, 2);\n\n// Arguments for Example: 1,2\n// constructor\n\n")),(0,o.kt)("p",null,"In the above example, we define a decorator function called ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," that takes one argument: ",(0,o.kt)("inlineCode",{parentName:"p"},"target"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," argument refers to the class that is being decorated. The ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," decorator function then replaces the original class with a new class that logs the name of the class and its constructor arguments to the console. The decorator function then calls the original class and logs the result to the console."),(0,o.kt)("p",null,"Finally, we apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," decorator to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Example")," class. When we instantiate the ",(0,o.kt)("inlineCode",{parentName:"p"},"Example")," class, the decorator function is invoked and logs the name of the class and its constructor arguments to the console. The decorator function then calls the original ",(0,o.kt)("inlineCode",{parentName:"p"},"Example")," class and logs the result to the console."),(0,o.kt)("h4",{id:"suggested-tutorials--2"},"Suggested Tutorials \ud83d\udcd1:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,o.kt)(r.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,o.kt)(r.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,o.kt)("h3",{id:"3-decorator-factories"},"3. Decorator Factories"),(0,o.kt)("p",null,"Decorator factories are used to create decorators that accept arguments. They are declared using the ",(0,o.kt)("inlineCode",{parentName:"p"},"@")," symbol followed by the name of the decorator function. The decorator function is then applied to the target function or class, which is passed as an argument to the decorator function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"\nfunction log(message) {\n  return function (target, name, descriptor) {\n    const original = descriptor.value;\n    if (typeof original === 'function') {\n      descriptor.value = function (...args) {\n        console.log(message);\n        try {\n          const result = original.apply(this, args);\n          console.log(`Result from ${name}: ${result}`);\n          return result;\n        } catch (e) {\n          console.log(`Error from ${name}: ${e}`);\n          throw e;\n        }\n      }\n    }\n    return descriptor;\n  }\n}\n\n\nclass Example {\n  @log('Hello from Example')\n  sum(a, b) {\n    return a + b;\n  }\n}\n\nconst e = new Example();\ne.sum(1, 2);\n\n// Hello from Example\n// Result from sum: 3\n\n")),(0,o.kt)("p",null,"In the above example, we define a decorator factory called ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," that takes one argument: ",(0,o.kt)("inlineCode",{parentName:"p"},"message"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," decorator factory then returns a decorator function that takes three arguments: ",(0,o.kt)("inlineCode",{parentName:"p"},"target"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"descriptor"),". The ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," argument refers to the class that contains the method being decorated. The ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," argument refers to the name of the method being decorated. The ",(0,o.kt)("inlineCode",{parentName:"p"},"descriptor")," argument is an object that contains the method's properties."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," decorator function then checks if the ",(0,o.kt)("inlineCode",{parentName:"p"},"descriptor")," value is a function. If it is, the decorator function replaces the original function with a new function that logs the message to the console. The decorator function then calls the original function and logs the result to the console."),(0,o.kt)("p",null,"Finally, we apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"log")," decorator to the ",(0,o.kt)("inlineCode",{parentName:"p"},"sum")," method of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Example")," class. When we call the ",(0,o.kt)("inlineCode",{parentName:"p"},"sum")," method, the decorator function is invoked and logs the message to the console. The decorator function then calls the original ",(0,o.kt)("inlineCode",{parentName:"p"},"sum")," method and logs the result to the console."),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,"JavaScript decorators provide an elegant way to enhance functions and classes without cluttering your core logic. Whether you're adding logging, validation, or other cross-cutting concerns, decorators promote modularity and reusability. By integrating decorators into your coding practices, you can craft more maintainable and extensible codebases, enriching the functionality of your JavaScript applications while maintaining a clear separation of concerns."),(0,o.kt)("p",null,"We hope you enjoyed this article on JavaScript decorators. "),(0,o.kt)("p",null,"Happy coding! \ud83d\ude4c"),(0,o.kt)("h4",{id:"suggested-tutorials--3"},"Suggested Tutorials \ud83d\udcd1:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,o.kt)(r.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,o.kt)(r.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))))}u.isMDXComponent=!0},31673:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(67294);function o(e){let{children:t,color:a}=e;return n.createElement("span",{style:{backgroundColor:a,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)}},81125:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/javascript-decorators-enhancing-functions-and-classes-52249077198b40893cb3777048bc1e8f.png"}}]);