"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[31011],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return a?n.createElement(g,o(o({ref:t},p),{},{components:a})):n.createElement(g,o({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},90737:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=a(87462),r=(a(67294),a(3905)),i=a(31673);const o={slug:"javascript-state-management-redux-and-mobx",title:"Mastering State Management in JavaScript: A Deep Dive into Redux and Mobx",description:"Explore Redux and Mobx, two leading JavaScript state management libraries. Learn their features, differences, and practical use cases to make informed decisions for effective state management in your applications.",keywords:["JavaScript state management","Redux vs Mobx","Redux and Mobx comparison","Redux state management","Mobx state management","Redux tutorial","Mobx tutorial","State management libraries","JavaScript application state","Redux concepts","Mobx concepts","Redux usage","Mobx usage","State management in JavaScript","Choosing state management library"],authors:["CSC"],image:"./javascript-state-management-redux-and-mobx.png",tags:["Javascript Tutorials","Web Development","Javascript Fundamentls"]},s=void 0,l={permalink:"/blog/javascript-state-management-redux-and-mobx",source:"@site/blog/2023-08-26-javascript-state-management-redux-and-mobx/index.mdx",title:"Mastering State Management in JavaScript: A Deep Dive into Redux and Mobx",description:"Explore Redux and Mobx, two leading JavaScript state management libraries. Learn their features, differences, and practical use cases to make informed decisions for effective state management in your applications.",date:"2023-08-26T00:00:00.000Z",formattedDate:"August 26, 2023",tags:[{label:"Javascript Tutorials",permalink:"/blog/tags/javascript-tutorials"},{label:"Web Development",permalink:"/blog/tags/web-development"},{label:"Javascript Fundamentls",permalink:"/blog/tags/javascript-fundamentls"}],readingTime:6.34,hasTruncateMarker:!1,authors:[{name:"CSC EDUCATION",title:"Author",url:"https://cscnotes.netlify.app",imageURL:"https://github.com/CSC.png",key:"CSC"}],frontMatter:{slug:"javascript-state-management-redux-and-mobx",title:"Mastering State Management in JavaScript: A Deep Dive into Redux and Mobx",description:"Explore Redux and Mobx, two leading JavaScript state management libraries. Learn their features, differences, and practical use cases to make informed decisions for effective state management in your applications.",keywords:["JavaScript state management","Redux vs Mobx","Redux and Mobx comparison","Redux state management","Mobx state management","Redux tutorial","Mobx tutorial","State management libraries","JavaScript application state","Redux concepts","Mobx concepts","Redux usage","Mobx usage","State management in JavaScript","Choosing state management library"],authors:["CSC"],image:"./javascript-state-management-redux-and-mobx.png",tags:["Javascript Tutorials","Web Development","Javascript Fundamentls"]},prevItem:{title:"Mastering Data Visualization: Chart.js vs. D3.js in JavaScript",permalink:"/blog/data-visualization-with-javascript-chart-js-and-d3-js"},nextItem:{title:"Date-fns vs MomentJS: Choosing the Right Date Utility Library",permalink:"/blog/working-with-dates-and-times-in-javascript-moment-js-and-date-fns"}},c={image:a(58502).Z,authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials-",level:4},{value:"The Need for State Management",id:"the-need-for-state-management",level:2},{value:"1. Redux",id:"1-redux",level:3},{value:"1.1 Redux Concepts",id:"11-redux-concepts",level:3},{value:"1.1.1 Store",id:"111-store",level:4},{value:"1.1.2 Actions",id:"112-actions",level:4},{value:"1.1.3 Reducers",id:"113-reducers",level:4},{value:"1.1.4 Action Creators",id:"114-action-creators",level:4},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--1",level:4},{value:"1.1.5 Middleware",id:"115-middleware",level:4},{value:"1.2 Redux Usage",id:"12-redux-usage",level:3},{value:"1.2.1 Installation",id:"121-installation",level:4},{value:"1.2.2 Creating a Store",id:"122-creating-a-store",level:4},{value:"1.2.3 Dispatching Actions",id:"123-dispatching-actions",level:4},{value:"1.2.4 Creating Reducers",id:"124-creating-reducers",level:4},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--2",level:4},{value:"1.2.5 Combining Reducers",id:"125-combining-reducers",level:4},{value:"1.2.6 Subscribing to Store Changes",id:"126-subscribing-to-store-changes",level:4},{value:"2. Mobx",id:"2-mobx",level:3},{value:"2.1 Mobx Concepts",id:"21-mobx-concepts",level:3},{value:"2.1.1 Observable State",id:"211-observable-state",level:4},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--3",level:4},{value:"2.1.2 Derivations",id:"212-derivations",level:4},{value:"2.1.3 Reactions",id:"213-reactions",level:4},{value:"2.2 Mobx Usage",id:"22-mobx-usage",level:3},{value:"2.2.1 Installation",id:"221-installation",level:4},{value:"2.2.2 Creating Observable State",id:"222-creating-observable-state",level:4},{value:"2.2.3 Creating Derivations",id:"223-creating-derivations",level:4},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--4",level:4},{value:"2.2.4 Creating Reactions",id:"224-creating-reactions",level:4},{value:"Conclusion",id:"conclusion",level:2},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--5",level:4}],u={toc:p};function d(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,r.kt)("meta",{name:"twitter:site",content:"@CSC"}),(0,r.kt)("meta",{name:"twitter:title",content:"JavaScript State Management: Redux and Mobx"}),(0,r.kt)("meta",{name:"twitter:description",content:"Explore Redux and Mobx, two leading JavaScript state management libraries. Learn their features, differences, and practical use cases to make informed decisions for effective state management in your applications."}),(0,r.kt)("meta",{name:"twitter:image",content:"./javascript-state-management-redux-and-mobx.png"}),(0,r.kt)("meta",{name:"twitter:image:alt",content:"JavaScript State Management: Redux and Mobx Banner Image"}),(0,r.kt)("meta",{name:"og:type",content:"article"}),(0,r.kt)("meta",{name:"og:title",content:"JavaScript State Management: Redux and Mobx"}),(0,r.kt)("meta",{name:"og:description",content:"Explore Redux and Mobx, two leading JavaScript state management libraries. Learn their features, differences, and practical use cases to make informed decisions for effective state management in your applications."}),(0,r.kt)("meta",{name:"og:image",content:"./javascript-state-management-redux-and-mobx.png"}),(0,r.kt)("meta",{name:"og:image:alt",content:"JavaScript State Management: Redux and Mobx Banner Image"}),(0,r.kt)("meta",{name:"og:site_name",content:"CSC"}),(0,r.kt)("meta",{name:"og:url",content:"https://cscnotes.netlify.app/blog/javascript-state-management-redux-and-mobx"}),(0,r.kt)("link",{rel:"canonical",href:"https://cscnotes.netlify.app/blog/javascript-state-management-redux-and-mobx"})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"&quot;JavaScript State Management: Redux and Mobx&quot;",src:a(58502).Z,width:"1272",height:"706"})),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Managing application state is a critical aspect of JavaScript development, and specialized libraries have emerged to address the complexities of state management. Two prominent contenders in this space are Redux and Mobx. "),(0,r.kt)("p",null,"In this article, we'll dive into the features, concepts, and usage of these libraries to help you make an informed choice for your state management needs."),(0,r.kt)("h4",{id:"suggested-tutorials-"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("h2",{id:"the-need-for-state-management"},"The Need for State Management"),(0,r.kt)("p",null,"As applications grow in complexity, maintaining and sharing state between components becomes challenging. State management libraries offer centralized solutions to streamline this process."),(0,r.kt)("p",null,"And while there are many state management libraries available, Redux and Mobx are two of the most popular choices for JavaScript applications."),(0,r.kt)("h3",{id:"1-redux"},"1. Redux"),(0,r.kt)("p",null,"Redux is a predictable state container for JavaScript applications. It enforces a unidirectional data flow pattern and emphasizes immutability to maintain a clear and predictable state management mechanism."),(0,r.kt)("p",null,"Redux is a popular choice for state management in React applications, but it can be used with any JavaScript framework or library."),(0,r.kt)("h3",{id:"11-redux-concepts"},"1.1 Redux Concepts"),(0,r.kt)("p",null,"Redux is based on three core principles:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Single Source of Truth"),": The state of your whole application is stored in an object tree within a single store."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"State is Read-Only"),": The only way to change the state is to emit an action, an object describing what happened."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Changes are Made with Pure Functions"),": To specify how the state tree is transformed by actions, you write pure reducers.")),(0,r.kt)("h4",{id:"111-store"},"1.1.1 Store"),(0,r.kt)("p",null,"The store is the single source of truth for your application state. It is a JavaScript object that holds the application state and provides a few helper methods to access the state, dispatch actions, and register listeners."),(0,r.kt)("h4",{id:"112-actions"},"1.1.2 Actions"),(0,r.kt)("p",null,"Actions are payloads of information that send data from your application to the store. They are the only source of information for the store. You send them to the store using ",(0,r.kt)("inlineCode",{parentName:"p"},"store.dispatch()"),"."),(0,r.kt)("p",null,"Actions are plain JavaScript objects. They must have a ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," property that indicates the type of action being performed. Types should typically be defined as string constants."),(0,r.kt)("h4",{id:"113-reducers"},"1.1.3 Reducers"),(0,r.kt)("p",null,"Reducers specify how the application's state changes in response to actions sent to the store. They are pure functions that take the previous state and an action, and return the next state."),(0,r.kt)("h4",{id:"114-action-creators"},"1.1.4 Action Creators"),(0,r.kt)("p",null,"Action creators are functions that create actions. They are useful when you need to pass data to a store's dispatch method."),(0,r.kt)("h4",{id:"suggested-tutorials--1"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("h4",{id:"115-middleware"},"1.1.5 Middleware"),(0,r.kt)("p",null,"Middleware provides a third-party extension point between dispatching an action and the moment it reaches the reducer. It is useful for logging actions, performing asynchronous operations, routing, and more."),(0,r.kt)("h3",{id:"12-redux-usage"},"1.2 Redux Usage"),(0,r.kt)("h4",{id:"121-installation"},"1.2.1 Installation"),(0,r.kt)("p",null,"To install Redux, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install redux\n")),(0,r.kt)("h4",{id:"122-creating-a-store"},"1.2.2 Creating a Store"),(0,r.kt)("p",null,"To create a Redux store, you need to provide a reducer to the ",(0,r.kt)("inlineCode",{parentName:"p"},"createStore")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { createStore } from 'redux';\n\nconst store = createStore(reducer);\n")),(0,r.kt)("h4",{id:"123-dispatching-actions"},"1.2.3 Dispatching Actions"),(0,r.kt)("p",null,"To dispatch an action, call the ",(0,r.kt)("inlineCode",{parentName:"p"},"dispatch")," method on the store object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"store.dispatch({\n  type: 'ADD_TODO',\n  payload: 'Learn Redux',\n});\n")),(0,r.kt)("h4",{id:"124-creating-reducers"},"1.2.4 Creating Reducers"),(0,r.kt)("p",null,"Reducers are pure functions that take the previous state and an action, and return the next state. They are used to specify how the application's state changes in response to actions sent to the store."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const initialState = {\n  todos: [],\n};\n\nfunction todoReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return {\n        ...state,\n        todos: [...state.todos, action.payload],\n      };\n    default:\n      return state;\n  }\n}\n")),(0,r.kt)("h4",{id:"suggested-tutorials--2"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("h4",{id:"125-combining-reducers"},"1.2.5 Combining Reducers"),(0,r.kt)("p",null,"Redux provides a ",(0,r.kt)("inlineCode",{parentName:"p"},"combineReducers")," helper function to combine multiple reducers into a single reducer function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { combineReducers } from 'redux';\n\nconst rootReducer = combineReducers({\n  todos: todoReducer,\n  visibilityFilter: visibilityFilterReducer,\n});\n")),(0,r.kt)("h4",{id:"126-subscribing-to-store-changes"},"1.2.6 Subscribing to Store Changes"),(0,r.kt)("p",null,"You can subscribe to store changes using the ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe")," method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"store.subscribe(() => {\n  console.log(store.getState()); // { todos: ['Learn Redux'] }\n});\n")),(0,r.kt)("h3",{id:"2-mobx"},"2. Mobx"),(0,r.kt)("p",null,"Mobx is a simple, scalable, and battle-tested state management solution. It is based on the observable state tree concept, which allows you to create observable objects and derive computed values from them."),(0,r.kt)("p",null,"Mobx is a popular choice for state management in React applications, but it can be used with any JavaScript framework or library."),(0,r.kt)("h3",{id:"21-mobx-concepts"},"2.1 Mobx Concepts"),(0,r.kt)("p",null,"Mobx is based on three core principles:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Observable State"),": The state of your application is stored in an observable state tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Derivations"),": Derivations are computed values that are derived from the state tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Reactions"),": Reactions are side effects that are automatically triggered when the state tree changes.")),(0,r.kt)("h4",{id:"211-observable-state"},"2.1.1 Observable State"),(0,r.kt)("p",null,"Mobx uses observable state trees to store the state of your application. Observable state trees are plain JavaScript objects that can be observed for changes."),(0,r.kt)("h4",{id:"suggested-tutorials--3"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("h4",{id:"212-derivations"},"2.1.2 Derivations"),(0,r.kt)("p",null,"Derivations are computed values that are derived from the state tree. They are automatically updated when the state tree changes."),(0,r.kt)("h4",{id:"213-reactions"},"2.1.3 Reactions"),(0,r.kt)("p",null,"Reactions are side effects that are automatically triggered when the state tree changes. They are useful for logging, updating the UI, and more."),(0,r.kt)("h3",{id:"22-mobx-usage"},"2.2 Mobx Usage"),(0,r.kt)("h4",{id:"221-installation"},"2.2.1 Installation"),(0,r.kt)("p",null,"To install Mobx, run the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install mobx\n")),(0,r.kt)("h4",{id:"222-creating-observable-state"},"2.2.2 Creating Observable State"),(0,r.kt)("p",null,"To create an observable state tree, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"observable")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { observable } from 'mobx';\n\nconst todoStore = observable({\n  todos: [],\n});\n")),(0,r.kt)("h4",{id:"223-creating-derivations"},"2.2.3 Creating Derivations"),(0,r.kt)("p",null,"To create a derivation, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"computed")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { observable, computed } from 'mobx';\n\nconst todoStore = observable({\n  todos: [],\n  get todoCount() {\n    return this.todos.length;\n  },\n});\n")),(0,r.kt)("h4",{id:"suggested-tutorials--4"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("h4",{id:"224-creating-reactions"},"2.2.4 Creating Reactions"),(0,r.kt)("p",null,"To create a reaction, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"reaction")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import { observable, reaction } from 'mobx';\n\nconst todoStore = observable({\n  todos: [],\n});\n\nreaction(\n  () => todoStore.todos.length,\n  (length) => console.log(length)\n);\n")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"Redux and Mobx are both excellent choices for state management in JavaScript applications. They both offer unique features and concepts that can help you streamline your state management needs."),(0,r.kt)("p",null,"In this article, we explored the features, concepts, and usage of these libraries to help you make an informed choice for your state management needs."),(0,r.kt)("p",null,"We hope you found this article useful. "),(0,r.kt)("p",null,"Happy coding! \ud83c\udf89"),(0,r.kt)("h4",{id:"suggested-tutorials--5"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))))}d.isMDXComponent=!0},31673:(e,t,a)=>{a.d(t,{Z:()=>r});var n=a(67294);function r(e){let{children:t,color:a}=e;return n.createElement("span",{style:{backgroundColor:a,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)}},58502:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/javascript-state-management-redux-and-mobx-e44261f6bab9e0e03dfce6c3ee4b840a.png"}}]);