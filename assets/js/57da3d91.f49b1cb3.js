"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[75803],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(a),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||s;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,i=new Array(s);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},98205:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const s={slug:"/class-intro",id:"class-intro",sidebar_label:"Class Intro",title:"JavaScript Class",description:"Learn about Javascript Class using our interactive Code Editor. JavaScript classes are a way to define a blueprint for creating objects that share the same properties and methods. They were introduced in ECMAScript 2015 (ES6) and are a syntactical sugar over the prototype-based inheritance model in JavaScript.",keywords:["JavaScript class","Class definition in JavaScript","Class syntax in JavaScript","Class constructors","Class properties","Class methods","Class inheritance"],image:"https://cscnotes.netlify.app/img/jsclasses-large.png"},i=void 0,o={unversionedId:"Javascript Classes/Class Intro/class-intro",id:"Javascript Classes/Class Intro/class-intro",title:"JavaScript Class",description:"Learn about Javascript Class using our interactive Code Editor. JavaScript classes are a way to define a blueprint for creating objects that share the same properties and methods. They were introduced in ECMAScript 2015 (ES6) and are a syntactical sugar over the prototype-based inheritance model in JavaScript.",source:"@site/docs/tutorial-javascript/08-Javascript Classes/02-Class Intro/index.mdx",sourceDirName:"08-Javascript Classes/02-Class Intro",slug:"/class-intro",permalink:"/javascript/class-intro",draft:!1,tags:[],version:"current",frontMatter:{slug:"/class-intro",id:"class-intro",sidebar_label:"Class Intro",title:"JavaScript Class",description:"Learn about Javascript Class using our interactive Code Editor. JavaScript classes are a way to define a blueprint for creating objects that share the same properties and methods. They were introduced in ECMAScript 2015 (ES6) and are a syntactical sugar over the prototype-based inheritance model in JavaScript.",keywords:["JavaScript class","Class definition in JavaScript","Class syntax in JavaScript","Class constructors","Class properties","Class methods","Class inheritance"],image:"https://cscnotes.netlify.app/img/jsclasses-large.png"},sidebar:"ethernetip",previous:{title:"Function Closures",permalink:"/javascript/function-closures"},next:{title:"Class Inheritance",permalink:"/javascript/class-inheritance"}},l={},c=[{value:"JavaScript Class Syntax",id:"javascript-class-syntax",level:2},{value:"Why javascript classes",id:"why-javascript-classes",level:2},{value:"Encapsulation",id:"encapsulation",level:3},{value:"Inheritance",id:"inheritance",level:3},{value:"Polymorphism",id:"polymorphism",level:3},{value:"Code organization",id:"code-organization",level:3}],p={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,r.kt)("meta",{name:"twitter:site",content:"@CSC"}),(0,r.kt)("meta",{name:"twitter:title",content:"Javascript Class"}),(0,r.kt)("meta",{name:"twitter:description",content:"Learn about Javascript Class using our interactive Code Editor."}),(0,r.kt)("meta",{name:"twitter:image",content:"https://cscnotes.netlify.app/img/jsclasses-large.png"}),(0,r.kt)("meta",{name:"twitter:image:alt",content:"Javascript Tutorial Banner Image"}),(0,r.kt)("meta",{name:"og:type",content:"article"}),(0,r.kt)("meta",{name:"og:title",content:"Javascript Class"}),(0,r.kt)("meta",{name:"og:description",content:"Learn about Javascript Class using our interactive Code Editor."}),(0,r.kt)("meta",{name:"og:image",content:"https://cscnotes.netlify.app/img/jsclasses-large.png"}),(0,r.kt)("meta",{name:"og:image:alt",content:"Javascript Tutorial Banner Image"}),(0,r.kt)("meta",{name:"og:site_name",content:"CSC"}),(0,r.kt)("meta",{name:"og:url",content:"https://cscnotes.netlify.app/javascript/class-intro"}),(0,r.kt)("link",{rel:"canonical",href:"https://cscnotes.netlify.app/javascript/class-intro"})),(0,r.kt)("p",null,"JavaScript ",(0,r.kt)("strong",{parentName:"p"},"classes are a way to define a blueprint for creating objects that share the same properties and methods"),". "),(0,r.kt)("p",null,"They were ",(0,r.kt)("strong",{parentName:"p"},"introduced in ECMAScript 2015 (ES6)")," and are a syntactical sugar over the prototype-based inheritance model in JavaScript."),(0,r.kt)("p",null,"To create a class in JavaScript, you can use the class keyword followed by the name of the class."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"As an example:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"class Car {\n  constructor(make, model) {\n    this.make = make;\n    this.model = model;\n  }\n\n  drive() {\n    console.log(`Driving a ${this.make} ${this.model}`);\n  }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In this example:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We have defined a class called ",(0,r.kt)("inlineCode",{parentName:"li"},"Car")," with a constructor method that accepts two parameters (",(0,r.kt)("inlineCode",{parentName:"li"},"make")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"model"),") and initializes two properties (",(0,r.kt)("inlineCode",{parentName:"li"},"this.make")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"this.model"),") with their values."),(0,r.kt)("li",{parentName:"ul"},"We have also defined a drive method that logs a message to the console.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\nTo create an object from this class, we can use the new keyword and call the constructor with the appropriate arguments:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const myCar = new Car("Honda", "Civic");\nmyCar.drive(); // Output: Driving a Honda Civic\n')),(0,r.kt)("h2",{id:"javascript-class-syntax"},"JavaScript Class Syntax"),(0,r.kt)("p",null,"JavaScript classes are defined using the ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," keyword followed by the name of the class. The body of the class is contained in curly braces and consists of a constructor method and zero or more methods and properties."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Here is the syntax for a basic class definition:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"class MyClass {\n  constructor() {\n    // constructor code here\n  }\n\n  method1() {\n    // method code here\n  }\n\n  method2() {\n    // method code here\n  }\n\n  // more methods and properties here...\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Explanation:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"The constructor method:")," This is a special method that is called when an object of the class is created. It is responsible for initializing the object's properties and setting its initial state. In this example, the constructor method is empty, meaning that it does not initialize any properties.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"method1 and method2:")," These are methods of the class that can be called on instances of the class. They define the behavior of the class and allow you to perform actions on objects created from the class.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Comment indicating that more methods and properties can be added:")," This is a placeholder for additional methods and properties that can be added to the class."))),(0,r.kt)("h2",{id:"why-javascript-classes"},"Why javascript classes"),(0,r.kt)("p",null,"They help to organize code and promote code reuse by encapsulating related data and behavior into a single unit."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Some benefits of using JavaScript classes include:")),(0,r.kt)("h3",{id:"encapsulation"},"Encapsulation"),(0,r.kt)("p",null,"Classes allow you to encapsulate related data and behavior into a single unit. This makes the code easier to understand and maintain, and reduces the likelihood of errors caused by accidentally modifying data or behavior that should be isolated."),(0,r.kt)("h3",{id:"inheritance"},"Inheritance"),(0,r.kt)("p",null,"Classes can be used to create hierarchies of objects, where subclasses inherit properties and methods from their parent class. This allows you to reuse code and avoid duplicating logic across multiple objects."),(0,r.kt)("h3",{id:"polymorphism"},"Polymorphism"),(0,r.kt)("p",null,"Classes can be used to create objects that share a common interface, but have different implementations. This allows you to write code that can operate on a variety of objects, without needing to know their specific implementation details."),(0,r.kt)("h3",{id:"code-organization"},"Code organization"),(0,r.kt)("p",null,"Classes provide a clear structure for organizing code, making it easier to read, understand, and maintain."))}d.isMDXComponent=!0}}]);