"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[59572],{3905:(a,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>d});var n=t(67294);function r(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function s(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function i(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){r(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function o(a,e){if(null==a)return{};var t,n,r=function(a,e){if(null==a)return{};var t,n,r={},s=Object.keys(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||(r[t]=a[t]);return r}(a,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(r[t]=a[t])}return r}var l=n.createContext({}),c=function(a){var e=n.useContext(l),t=e;return a&&(t="function"==typeof a?a(e):i(i({},e),a)),t},p=function(a){var e=c(a.components);return n.createElement(l.Provider,{value:e},a.children)},m="mdxType",u={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},h=n.forwardRef((function(a,e){var t=a.components,r=a.mdxType,s=a.originalType,l=a.parentName,p=o(a,["components","mdxType","originalType","parentName"]),m=c(t),h=r,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||s;return t?n.createElement(d,i(i({ref:e},p),{},{components:t})):n.createElement(d,i({ref:e},p))}));function d(a,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof a||r){var s=t.length,i=new Array(s);i[0]=h;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=a,o[m]="string"==typeof a?a:r,i[1]=o;for(var c=2;c<s;c++)i[c]=t[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},25085:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=t(87462),r=(t(67294),t(3905)),s=t(31673);const i={slug:"javascript-callbacks-vs-promises-vs-async-await",title:"Mastering Asynchronous JavaScript: Callbacks, Promises, and Async/Await Explained",description:"Discover the power of asynchronous programming in JavaScript and choose the right approach for your projects. Explore Callbacks, Promises, and Async/Await with practical examples and tips",keywords:["JavaScript","Asynchronous Programming","Callbacks","Promises","Async/Await","Web Development","JavaScript Fundamentals","Modern JavaScript","Async JavaScript","Choosing the Right Approach","JavaScript Tutorials","Web Developers","JavaScript Basics"],authors:["CSC"],image:"./javascript-callbacks-vs-promises-vs-async-await.png",tags:["Javascript Tutorials","Web Development","Javascript Fundamentls"]},o=void 0,l={permalink:"/blog/javascript-callbacks-vs-promises-vs-async-await",source:"@site/blog/2023-08-23-javascript-callbacks-vs-promises-vs-async-await/index.mdx",title:"Mastering Asynchronous JavaScript: Callbacks, Promises, and Async/Await Explained",description:"Discover the power of asynchronous programming in JavaScript and choose the right approach for your projects. Explore Callbacks, Promises, and Async/Await with practical examples and tips",date:"2023-08-23T00:00:00.000Z",formattedDate:"August 23, 2023",tags:[{label:"Javascript Tutorials",permalink:"/blog/tags/javascript-tutorials"},{label:"Web Development",permalink:"/blog/tags/web-development"},{label:"Javascript Fundamentls",permalink:"/blog/tags/javascript-fundamentls"}],readingTime:3.885,hasTruncateMarker:!1,authors:[{name:"CSC EDUCATION",title:"Author",url:"https://cscnotes.netlify.app",imageURL:"https://github.com/CSC.png",key:"CSC"}],frontMatter:{slug:"javascript-callbacks-vs-promises-vs-async-await",title:"Mastering Asynchronous JavaScript: Callbacks, Promises, and Async/Await Explained",description:"Discover the power of asynchronous programming in JavaScript and choose the right approach for your projects. Explore Callbacks, Promises, and Async/Await with practical examples and tips",keywords:["JavaScript","Asynchronous Programming","Callbacks","Promises","Async/Await","Web Development","JavaScript Fundamentals","Modern JavaScript","Async JavaScript","Choosing the Right Approach","JavaScript Tutorials","Web Developers","JavaScript Basics"],authors:["CSC"],image:"./javascript-callbacks-vs-promises-vs-async-await.png",tags:["Javascript Tutorials","Web Development","Javascript Fundamentls"]},prevItem:{title:"Choosing the Best JavaScript Animation Library: GreenSock (GSAP) vs. Anime.js",permalink:"/blog/javascript-animation-libraries-greensock-gsap-vs-animejs"},nextItem:{title:"JavaScript Storage Solutions: Cookies vs. Local Storage vs. Session Storage",permalink:"/blog/javascript-cookies-vs-local-storage-vs-session-storage"}},c={image:t(38122).Z,authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials-",level:4},{value:"What is Asynchronous Programming?",id:"what-is-asynchronous-programming",level:2},{value:"1. Callbacks",id:"1-callbacks",level:3},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--1",level:4},{value:"2. Promises",id:"2-promises",level:3},{value:"3. Async/Await",id:"3-asyncawait",level:3},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--2",level:4},{value:"Choosing the Right Approach",id:"choosing-the-right-approach",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--3",level:4}],m={toc:p};function u(a){let{components:e,...i}=a;return(0,r.kt)("wrapper",(0,n.Z)({},m,i,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,r.kt)("meta",{name:"twitter:site",content:"@CSC"}),(0,r.kt)("meta",{name:"twitter:title",content:"Mastering Asynchronous JavaScript: Callbacks, Promises, and Async/Await Explained"}),(0,r.kt)("meta",{name:"twitter:description",content:"Explore the fundamentals of asynchronous programming in JavaScript, and learn how to choose the right approach for your projects."}),(0,r.kt)("meta",{name:"twitter:image",content:"./javascript-callbacks-vs-promises-vs-async-await.png"}),(0,r.kt)("meta",{name:"twitter:image:alt",content:"Mastering Asynchronous JavaScript: Callbacks, Promises, and Async/Await Explained Banner Image"}),(0,r.kt)("meta",{name:"og:type",content:"article"}),(0,r.kt)("meta",{name:"og:title",content:"Mastering Asynchronous JavaScript: Callbacks, Promises, and Async/Await Explained"}),(0,r.kt)("meta",{name:"og:description",content:"Explore the fundamentals of asynchronous programming in JavaScript, and learn how to choose the right approach for your projects."}),(0,r.kt)("meta",{name:"og:image",content:"./javascript-callbacks-vs-promises-vs-async-await.png"}),(0,r.kt)("meta",{name:"og:image:alt",content:"Mastering Asynchronous JavaScript: Callbacks, Promises, and Async/Await Explained Banner Image"}),(0,r.kt)("meta",{name:"og:site_name",content:"CSC"}),(0,r.kt)("meta",{name:"og:url",content:"https://cscnotes.netlify.app/blog/javascript-callbacks-vs-promises-vs-async-await"}),(0,r.kt)("link",{rel:"canonical",href:"https://cscnotes.netlify.app/blog/javascript-callbacks-vs-promises-vs-async-await"})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"&quot;Mastering Asynchronous JavaScript: Callbacks, Promises, and Async/Await Explained&quot;",src:t(38122).Z,width:"1222",height:"678"})),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Asynchronous programming is a cornerstone of modern web development. JavaScript offers several approaches for managing asynchronous operations, including callbacks, Promises, and the newer async/await syntax. "),(0,r.kt)("p",null,"In this guide, we'll explore these approaches, their strengths, and how to choose the right one for your projects."),(0,r.kt)("h4",{id:"suggested-tutorials-"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(s.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(s.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("h2",{id:"what-is-asynchronous-programming"},"What is Asynchronous Programming?"),(0,r.kt)("p",null,"Asynchronous programming is a programming paradigm that allows code to run in the background, without blocking the main execution thread."),(0,r.kt)("p",null,"We all knows JavaScript is a single-threaded language, meaning that only one operation can be executed at a time. This means that if a long-running operation is executed, the main thread will be blocked until the operation is complete. "),(0,r.kt)("h3",{id:"1-callbacks"},"1. ",(0,r.kt)("a",{parentName:"h3",href:"https://cscnotes.netlify.app/javascript/javascript-callbacks"},"Callbacks")),(0,r.kt)("p",null,"Callbacks are the most basic approach to asynchronous programming in JavaScript. A callback is a function that is passed as an argument to another function, and is executed when the function completes."),(0,r.kt)("p",null,"Callbacks are used in many JavaScript APIs, such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"setTimeout()")," function, which executes a callback after a specified amount of time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nsetTimeout(() => {\n  console.log('Hello, world!');\n}, 1000);\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In this example:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"setTimeout()")," function takes two arguments: a callback function, and a delay in milliseconds."),(0,r.kt)("li",{parentName:"ul"},"The callback function is executed after the specified delay.")),(0,r.kt)("h4",{id:"suggested-tutorials--1"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(s.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(s.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("h3",{id:"2-promises"},"2. ",(0,r.kt)("a",{parentName:"h3",href:"https://cscnotes.netlify.app/javascript/javascript-promises"},"Promises")),(0,r.kt)("p",null,"Promises are a more advanced approach to asynchronous programming in JavaScript. A Promise is an object that represents the eventual completion (or failure) of an asynchronous operation, and its resulting value."),(0,r.kt)("p",null,"Promises are used in many JavaScript APIs, such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch()")," function, which returns a Promise that resolves to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nfetch('https://api.example.com')\n  .then(response => {\n    console.log(response);\n  });\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In this example:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"fetch()")," function takes a URL as an argument, and returns a Promise that resolves to a ",(0,r.kt)("inlineCode",{parentName:"li"},"Response")," object."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"then()")," method is called on the Promise, and takes a callback function as an argument."),(0,r.kt)("li",{parentName:"ul"},"The callback function is executed when the Promise resolves, and is passed the ",(0,r.kt)("inlineCode",{parentName:"li"},"Response")," object as an argument.")),(0,r.kt)("h3",{id:"3-asyncawait"},"3. ",(0,r.kt)("a",{parentName:"h3",href:"https://cscnotes.netlify.app/javascript/javascript-async"},"Async/Await")),(0,r.kt)("p",null,"Async/Await is a newer approach to asynchronous programming in JavaScript. Async/Await is built on top of Promises, and provides a more elegant syntax for managing asynchronous operations."),(0,r.kt)("p",null,"Async/Await is used in many JavaScript APIs, such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch()")," function, which returns a Promise that resolves to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nconst fetchExample = async () => {\n  const response = await fetch('https://api.example.com');\n  console.log(response);\n}\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In this example:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"fetchExample()")," function is declared as an ",(0,r.kt)("inlineCode",{parentName:"li"},"async")," function, which means it will return a Promise."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"await")," keyword is used to wait for the Promise to resolve, and assign the result to the ",(0,r.kt)("inlineCode",{parentName:"li"},"response")," variable."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"response")," variable is logged to the console.")),(0,r.kt)("h4",{id:"suggested-tutorials--2"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(s.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(s.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("h2",{id:"choosing-the-right-approach"},"Choosing the Right Approach"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Callbacks:")," Suitable for small projects and simple asynchronous tasks. Avoid for complex operations due to readability issues."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Promises:")," A solid choice for most scenarios. Helps with managing asynchronous flows and error handling."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Async/Await:")," Ideal for modern projects and teams familiar with ES6+. Offers clean and understandable asynchronous code, especially for complex operations.")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"The choice between callbacks, Promises, and async/await depends on your project's complexity, team familiarity with modern JavaScript, and the readability you aim for. Promises and async/await have largely replaced callbacks due to their improved structure and readability. Mastering these asynchronous approaches equips you to handle the dynamic nature of modern web development more effectively."),(0,r.kt)("p",null,"We hope you found this guide useful."),(0,r.kt)("p",null,"Happy coding! \ud83e\udd73"),(0,r.kt)("h4",{id:"suggested-tutorials--3"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(s.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(s.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))))}u.isMDXComponent=!0},31673:(a,e,t)=>{t.d(e,{Z:()=>r});var n=t(67294);function r(a){let{children:e,color:t}=a;return n.createElement("span",{style:{backgroundColor:t,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},e)}},38122:(a,e,t)=>{t.d(e,{Z:()=>n});const n=t.p+"assets/images/javascript-callbacks-vs-promises-vs-async-await-281c5ea2c7a10abc02228132f390c48f.png"}}]);