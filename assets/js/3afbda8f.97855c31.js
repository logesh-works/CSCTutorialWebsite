"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[84674],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>u});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),c=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},p=function(e){var a=c(e.components);return n.createElement(l.Provider,{value:a},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,u=m["".concat(l,".").concat(d)]||m[d]||h[d]||i;return t?n.createElement(u,o(o({ref:a},p),{},{components:t})):n.createElement(u,o({ref:a},p))}));function u(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},70658:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var n=t(87462),r=(t(67294),t(3905)),i=t(31673);const o={slug:"advanced-javascript-promises-promise-chaining-and-error-handling",title:"Advanced JavaScript Promises: Promise Chaining and Error Handling",description:"In this article, we'll delve into advanced aspects of promises, focusing on promise chaining and robust error handling techniques. By mastering these concepts, you can write more elegant and robust asynchronous code.",keywords:["javascript","promises","promise chaining","error handling","async/await","async await","async","await","javascript error handling best practices","javascript promise chaining","javascript promise chaining error handling","javascript promise chaining example","javascript promise chaining multiple","javascript promise chaining multiple","javascript promise chaining multiple"],authors:["CSC"],image:"./advanced-javascript-promises-promise-chaining-and-error-handling.png",tags:["Javascript Tutorials","Web Development","Javascript Fundamentls"]},s=void 0,l={permalink:"/blog/advanced-javascript-promises-promise-chaining-and-error-handling",source:"@site/blog/2023-08-28-advanced-javascript-promises-promise-chaining-and-error-handling/index.mdx",title:"Advanced JavaScript Promises: Promise Chaining and Error Handling",description:"In this article, we'll delve into advanced aspects of promises, focusing on promise chaining and robust error handling techniques. By mastering these concepts, you can write more elegant and robust asynchronous code.",date:"2023-08-28T00:00:00.000Z",formattedDate:"August 28, 2023",tags:[{label:"Javascript Tutorials",permalink:"/blog/tags/javascript-tutorials"},{label:"Web Development",permalink:"/blog/tags/web-development"},{label:"Javascript Fundamentls",permalink:"/blog/tags/javascript-fundamentls"}],readingTime:4.46,hasTruncateMarker:!1,authors:[{name:"CSC EDUCATION",title:"Author",url:"https://cscnotes.netlify.app",imageURL:"https://github.com/CSC.png",key:"CSC"}],frontMatter:{slug:"advanced-javascript-promises-promise-chaining-and-error-handling",title:"Advanced JavaScript Promises: Promise Chaining and Error Handling",description:"In this article, we'll delve into advanced aspects of promises, focusing on promise chaining and robust error handling techniques. By mastering these concepts, you can write more elegant and robust asynchronous code.",keywords:["javascript","promises","promise chaining","error handling","async/await","async await","async","await","javascript error handling best practices","javascript promise chaining","javascript promise chaining error handling","javascript promise chaining example","javascript promise chaining multiple","javascript promise chaining multiple","javascript promise chaining multiple"],authors:["CSC"],image:"./advanced-javascript-promises-promise-chaining-and-error-handling.png",tags:["Javascript Tutorials","Web Development","Javascript Fundamentls"]},nextItem:{title:"Mastering Data Visualization: Chart.js vs. D3.js in JavaScript",permalink:"/blog/data-visualization-with-javascript-chart-js-and-d3-js"}},c={image:t(39532).Z,authorsImageUrls:[void 0]},p=[{value:"Introduction",id:"introduction",level:2},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials-",level:4},{value:"1. Promise Chaining",id:"1-promise-chaining",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--1",level:4},{value:"3. Promise Chaining With Async Await",id:"3-promise-chaining-with-async-await",level:3},{value:"4. Error Handling With Async Await",id:"4-error-handling-with-async-await",level:3},{value:"Suggested Tutorials \ud83d\udcd1:",id:"suggested-tutorials--2",level:4},{value:"Conclusion",id:"conclusion",level:2}],m={toc:p};function h(e){let{components:a,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,o,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("head",null,(0,r.kt)("meta",{name:"twitter:card",content:"summary_large_image"}),(0,r.kt)("meta",{name:"twitter:site",content:"@CSC"}),(0,r.kt)("meta",{name:"twitter:title",content:"Advanced JavaScript Promises: Promise Chaining and Error Handling"}),(0,r.kt)("meta",{name:"twitter:description",content:"Learn how to use promise chaining and error handling to write more elegant and robust asynchronous code in JavaScript."}),(0,r.kt)("meta",{name:"twitter:image",content:"./advanced-javascript-promises-promise-chaining-and-error-handling.png"}),(0,r.kt)("meta",{name:"twitter:image:alt",content:"Advanced JavaScript Promises: Promise Chaining and Error Handling Banner Image"}),(0,r.kt)("meta",{name:"og:type",content:"article"}),(0,r.kt)("meta",{name:"og:title",content:"Advanced JavaScript Promises: Promise Chaining and Error Handling"}),(0,r.kt)("meta",{name:"og:description",content:"Learn how to use promise chaining and error handling to write more elegant and robust asynchronous code in JavaScript."}),(0,r.kt)("meta",{name:"og:image",content:"./advanced-javascript-promises-promise-chaining-and-error-handling.png"}),(0,r.kt)("meta",{name:"og:image:alt",content:"Advanced JavaScript Promises: Promise Chaining and Error Handling Banner Image"}),(0,r.kt)("meta",{name:"og:site_name",content:"CSC"}),(0,r.kt)("meta",{name:"og:url",content:"https://cscnotes.netlify.app/blog/advanced-javascript-promises-promise-chaining-and-error-handling"}),(0,r.kt)("link",{rel:"canonical",href:"https://cscnotes.netlify.app/blog/advanced-javascript-promises-promise-chaining-and-error-handling"})),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"&quot;Advanced JavaScript Promises: Promise Chaining and Error Handling&quot;",src:t(39532).Z,width:"1290",height:"728"})),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Promises in JavaScript revolutionized asynchronous programming, simplifying complex chains of callbacks. However, their power goes beyond basic usage."),(0,r.kt)("p",null,"In this article, we'll deive into advanced aspects of promises, focusing on promise chaining and robust error handling techniques. By mastering these concepts, you can write more elegant and robust asynchronous code."),(0,r.kt)("h4",{id:"suggested-tutorials-"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("p",null,"Let's get started! \ud83d\ude80"),(0,r.kt)("h3",{id:"1-promise-chaining"},"1. ",(0,r.kt)("a",{parentName:"h3",href:"https://cscnotes.netlify.app/javascript/javascript-promises"},"Promise")," Chaining"),(0,r.kt)("p",null,"Promise chaining is a powerful technique that allows you to simplify complex asynchronous code. It involves chaining multiple promises together, where the result of one promise is passed to the next promise in the chain. "),(0,r.kt)("p",null,"Let's look at an example of promise chaining. "),(0,r.kt)("p",null,"In this example, we'll use the ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch()")," API to retrieve a list of users from a remote server. We'll then use the ",(0,r.kt)("inlineCode",{parentName:"p"},"map()")," method to extract the ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," property from each user object. "),(0,r.kt)("p",null,"Finally, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"forEach()")," method to log each name to the console."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => users.map(user => user.name))\n  .then(names => names.forEach(name => console.log(name)));\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In the above example:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We chain three promises together. The first promise is returned by the ",(0,r.kt)("inlineCode",{parentName:"li"},"fetch()")," method."),(0,r.kt)("li",{parentName:"ul"},"This promise resolves to a ",(0,r.kt)("inlineCode",{parentName:"li"},"Response")," object, which we pass to the ",(0,r.kt)("inlineCode",{parentName:"li"},"json()")," method."),(0,r.kt)("li",{parentName:"ul"},"This method returns a promise that resolves to a JavaScript object."),(0,r.kt)("li",{parentName:"ul"},"We then pass this object to the ",(0,r.kt)("inlineCode",{parentName:"li"},"map()")," method, which returns a new array containing the ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," property of each user object."),(0,r.kt)("li",{parentName:"ul"},"Finally, we pass this array to the ",(0,r.kt)("inlineCode",{parentName:"li"},"forEach()")," method, which logs each name to the console.")),(0,r.kt)("h3",{id:"2-error-handling"},"2. Error Handling"),(0,r.kt)("p",null,"In the previous example, we didn't handle any errors. This is a common mistake when working with promises. It's important to handle errors, as they can occur at any point in the promise chain."),(0,r.kt)("p",null,"Let's look at an example of error handling."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nfetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(users => users.map(user => user.name))\n  .then(names => names.forEach(name => console.log(name)))\n  .catch(error => console.log(error.message));\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In the above example:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We chain four promises together. And we use the ",(0,r.kt)("inlineCode",{parentName:"li"},"catch()")," method to handle errors."),(0,r.kt)("li",{parentName:"ul"},"So if any of the promises in the chain rejects, the error will be passed to the ",(0,r.kt)("inlineCode",{parentName:"li"},"catch()")," method.")),(0,r.kt)("h4",{id:"suggested-tutorials--1"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("h3",{id:"3-promise-chaining-with-async-await"},"3. Promise Chaining With ",(0,r.kt)("a",{parentName:"h3",href:"https://cscnotes.netlify.app/javascript/javascript-async"},"Async Await")),(0,r.kt)("p",null,"async/await, providing a cleaner way to work with promises, making the code look more synchronous. It's important to note that async/await is built on top of promises. So you can use async/await with promises. In fact, async/await is just syntactic sugar for promises."),(0,r.kt)("p",null,"Now let's look at an example of promise chaining with async/await.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nasync function getUsers() {\n  const response = await fetch('https://jsonplaceholder.typicode.com/users');\n  const users = await response.json();\n  const names = users.map(user => user.name);\n  names.forEach(name => console.log(name));\n}\n\ngetUsers();\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In the above example:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We use the ",(0,r.kt)("inlineCode",{parentName:"li"},"async")," keyword to define an asynchronous function."),(0,r.kt)("li",{parentName:"ul"},"Then ",(0,r.kt)("inlineCode",{parentName:"li"},"await")," keyword to wait for the promise returned by the ",(0,r.kt)("inlineCode",{parentName:"li"},"fetch()")," method to resolve."),(0,r.kt)("li",{parentName:"ul"},"Then another ",(0,r.kt)("inlineCode",{parentName:"li"},"await")," keyword to wait for the promise returned by the ",(0,r.kt)("inlineCode",{parentName:"li"},"json()")," method to resolve."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"map()")," method to extract the ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," property from each user object."),(0,r.kt)("li",{parentName:"ul"},"Finally, we use the ",(0,r.kt)("inlineCode",{parentName:"li"},"forEach()")," method to log each name to the console.")),(0,r.kt)("h3",{id:"4-error-handling-with-async-await"},"4. Error Handling With ",(0,r.kt)("a",{parentName:"h3",href:"https://cscnotes.netlify.app/javascript/javascript-async"},"Async Await")),(0,r.kt)("p",null,"In the previous example, we didn't handle any errors. which is not a good practice.\nit's always a good idea to handle errors, as they can occur at any point in the promise chain and brake your code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"\nasync function getUsers() {\n  try {\n    const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    const users = await response.json();\n    const names = users.map(user => user.name);\n    names.forEach(name => console.log(name));\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\ngetUsers();\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"In the above example:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We use the ",(0,r.kt)("inlineCode",{parentName:"li"},"async")," keyword to define an asynchronous function."),(0,r.kt)("li",{parentName:"ul"},"Then we use the ",(0,r.kt)("inlineCode",{parentName:"li"},"try")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"catch")," keywords to handle errors."),(0,r.kt)("li",{parentName:"ul"},"If any of the promises in the chain rejects, the error will be passed to the ",(0,r.kt)("inlineCode",{parentName:"li"},"catch()")," method.")),(0,r.kt)("h4",{id:"suggested-tutorials--2"},"Suggested Tutorials \ud83d\udcd1:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"Learn Javascript From Scratch \ud83e\udd73")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://cscnotes.netlify.app/javascript/javascript-html-dom"},(0,r.kt)(i.Z,{color:"#25c2a0",mdxType:"Highlight"},"JavaScript HTML DOM Manipulation"))))),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this article, we've explored advanced aspects of promises, focusing on promise chaining and robust error handling techniques. By mastering these concepts, you can write more elegant and robust asynchronous code.  We've also looked at how to use async/await with promises. So you can use async/await with promises. "),(0,r.kt)("p",null,"We hope you found this article useful. "),(0,r.kt)("p",null,"Happy coding! \ud83c\udf89"))}h.isMDXComponent=!0},31673:(e,a,t)=>{t.d(a,{Z:()=>r});var n=t(67294);function r(e){let{children:a,color:t}=e;return n.createElement("span",{style:{backgroundColor:t,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},a)}},39532:(e,a,t)=>{t.d(a,{Z:()=>n});const n=t.p+"assets/images/advanced-javascript-promises-promise-chaining-and-error-handling-f7ebd3d1e8bed1cb7991dd4845c2c628.png"}}]);